<?php
/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_image_widget().
 */
function my_theme_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];
  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

use Drupal\Core\Form\FormStateInterface;

/***** テーマ選択 *****/
function my_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['my_theme_settings'] = [
    '#type' => 'details',
    '#title' => t('My Theme settings'),
    '#open' => TRUE,
  ];
  
  $form['bootswatch_theme'] = [
    '#type' => 'select',
    '#title' => t('Bootswatch Theme'),
    '#description' => t('Select a Bootswatch theme for this site.'),
    '#default_value' => theme_get_setting('bootswatch_theme', 'my_theme'),
    '#options' => [
      'bootstrap5' => t('Default'),
      'cerulean' => t('Cerulean'),
      'cosmo' => t('Cosmo'),
      'cyborg' => t('Cyborg'),
      'darkly' => t('Darkly'),
      'flatly' => t('Flatly'),
      'journal' => t('Journal'),
      'litera' => t('Litera'),
      'lumen' => t('Lumen'),
      'lux' => t('Lux'),
      'materia' => t('Materia'),
    ],
  ];

  // Container type
  $form['my_theme_settings']['container_type'] = [
    '#type' => 'select',
    '#title' => t('Container Type'),
    '#default_value' => theme_get_setting('container_type', 'my_theme'),
    '#options' => [
      'container' => t('Fixed'),
      'container-fluid' => t('Fluid'),
    ],
  ];

  // Bootstrap size
  $form['my_theme_settings']['bootstrap_size'] = [
    '#type' => 'select',
    '#title' => t('Bootstrap Size'),
    '#description' => t('Note: This setting is ignored when Container Type is Fluid.'),
    '#options' => [
      'xs' => t('Extra small (xs)'),
      'sm' => t('Small (sm)'),
      'md' => t('Medium (md)'),
      'lg' => t('Large (lg)'),
      'xl' => t('Extra large (xl)'),
      'xxl' => t('Extra extra large (xxl)'),
    ],
    '#default_value' => theme_get_setting('bootstrap_size', 'my_theme'),
  ];

  // Add a setting for the branding alignment
  $form['branding_alignment'] = [
    '#type' => 'radios',
    '#title' => t('Branding Alignment'),
    '#default_value' => theme_get_setting('branding_alignment'),
    '#options' => [
      'left' => t('Left'),
      'center' => t('Center'),
    ],
  ];
}



/***** テーマ設定関係をhtml.html.twigに反映する *****/
function my_theme_preprocess_html(array &$variables) {
  $theme = theme_get_setting('bootswatch_theme', 'my_theme');

  // 共通のスクリプトを読み込む
  $variables['#attached']['library'][] = 'my_theme/global-scripts';

  // テーマ設定関係を読み込む
  $variables['container_class'] = theme_get_setting('container_type', 'my_theme');
  $variables['bootstrap_size'] = theme_get_setting('bootstrap_size', 'my_theme');

  // 選択されたBootswatchのテーマCSSをライブラリから読み込む
  if ($theme && $theme !== 'bootstrap5') {
    $variables['#attached']['library'][] = 'my_theme/' . $theme;
  }
}


/***** テーマの設定関係をpage.html.twigに反映する *****/
function my_theme_preprocess_page(&$variables) {
  $variables['container_class'] = theme_get_setting('container_type', 'my_theme');
  $variables['bootstrap_size'] = theme_get_setting('bootstrap_size', 'my_theme');
  $variables['branding_alignment'] = theme_get_setting('branding_alignment');
}




use Drupal\Core\Menu\MenuTreeParameters;

function my_theme_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'system_menu_block:main') {
    $parameters = new \Drupal\Core\Menu\MenuTreeParameters();
    $menu_tree = \Drupal::menuTree()->load('main', $parameters);
    $menu = \Drupal::menuTree()->build($menu_tree);
    $variables['main_menu'] = $menu['#items'];
  }
}
