<?php

/**
 * @file
 * テーマのサポート関数を提供します。
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Render\Element;

/**
 * hook_preprocess_image_widget() の実装。
 */
function my_theme_preprocess_image_widget(array &$variables) {
  // プレビューコンテナHTMLのレンダリングを、アクセス権がない場合に防ぎます。
  if (!empty($variables['data']['preview']['#access']) && $variables['data']['preview']['#access'] === FALSE) {
    unset($variables['data']['preview']);
  }
}

/**
 * テーマ設定フォームを変更してカスタム設定を追加します。
 */
function my_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  // Bootswatchテーマの選択肢を追加。
  $form['bootswatch_theme'] = [
    '#type' => 'select',
    '#title' => t('Bootswatch テーマ'),
    '#description' => t('サイト用のBootswatchテーマを選択してください。'),
    '#default_value' => theme_get_setting('bootswatch_theme', 'my_theme'),
    '#options' => _my_theme_bootswatch_options(),
  ];

  // テーマ設定セクションの追加。
  $form['my_theme_settings'] = [
    '#type' => 'details',
    '#title' => t('My Theme の設定'),
    '#open' => TRUE,
  ];

  // その他のテーマ設定を追加。
  $form['my_theme_settings'] += [
    'container_type' => [
      '#type' => 'select',
      '#title' => t('コンテナタイプ'),
      '#default_value' => theme_get_setting('container_type', 'my_theme'),
      '#options' => [
        'container' => t('固定'),
        'container-fluid' => t('流動的'),
      ],
    ],
    'bootstrap_size' => [
      '#type' => 'select',
      '#title' => t('Bootstrap サイズ'),
      '#description' => t('注意: コンテナタイプが「流動的」の場合は無視されます。'),
      '#default_value' => theme_get_setting('bootstrap_size', 'my_theme'),
      '#options' => _my_theme_bootstrap_size_options(),
    ],
    'navbar_type' => [
      '#type' => 'select',
      '#title' => t('ナビゲーションバータイプ'),
      '#default_value' => theme_get_setting('navbar_type', 'my_theme'),
      '#options' => _my_theme_navbar_options(),
      '#description' => t('ナビゲーションバーの種類を選択してください。'),
    ],

  // 配置設定を追加。
    'branding_alignment' => [
      '#type' => 'radios',
      '#title' => t('タイトルやロゴの水平位置'),
      '#default_value' => theme_get_setting('branding_alignment'),
      '#options' => [
        'left' => t('左寄せ'),
        'center' => t('中央'),
      ],
      '#description' => t('Main または Additional navigation にブロックが配置されている場合、左に固定されます。'),
    ],
    'my_theme_header_alignment' => [
      '#type' => 'select',
      '#title' => t('ヘッダー要素の水平位置'),
      '#default_value' => theme_get_setting('my_theme_header_alignment'),
      '#options' => [
        'left' => t('左寄せ'),
        'center' => t('中央'),
        'right' => t('右寄せ'),
      ],
      '#description' => t('Header にブロックが配置されている場合のみ有効です。'),
    ],
  ];

  // カスタムCSS
    $form['custom_css_settings'] = [
    '#type' => 'details',
    '#title' => t('Custom CSS Settings'),
    '#open' => TRUE,
  ];

  // カスタムCSS適用の有効/無効
  $form['custom_css_settings']['enable_custom_css'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Custom CSS'),
    '#default_value' => theme_get_setting('enable_custom_css', 'my_theme'),
  ];

  // カスタムCSS入力フィールド
  $form['custom_css_settings']['custom_css'] = [
    '#type' => 'textarea',
    '#title' => t('Custom CSS'),
    '#description' => t('ここに入力されたカスタム CSS は全ページに適用されます。ただし、不正な入力によりページデザインの破壊やセキュリティリスクが生じる可能性がありますので注意してください。HTML タグや JavaScript を含めないようにしてください。'),
    '#default_value' => theme_get_setting('custom_css', 'my_theme'),
    '#states' => [
      'visible' => [
        ':input[name="enable_custom_css"]' => ['checked' => TRUE],
      ],
    ],
  ];

  // カスタムサブミットハンドラーを追加。
  $form['#submit'][] = 'my_theme_form_system_theme_settings_submit';
}

/**
 * テーマ設定フォームのカスタムサブミットハンドラー。
 */
function my_theme_form_system_theme_settings_submit($form, FormStateInterface $form_state) {
  // 設定を保存する。
  $config = \Drupal::configFactory()->getEditable('my_theme.settings');

  // すべての設定値を一括で保存
  $keys = ['my_theme_header_alignment', 'navbar_type', 'enable_custom_css', 'custom_css'];
  foreach ($keys as $key) {
    $config->set($key, $form_state->getValue($key));
  }

  $config->save();
}


/**
 * HTMLテンプレート用の変数を準備します。
 */
function my_theme_preprocess_html(array &$variables) {
  // 必要なテーマ設定を一括取得
  $theme_settings = [
    'bootswatch_theme' => theme_get_setting('bootswatch_theme', 'my_theme'),
    'container_class' => theme_get_setting('container_type', 'my_theme'),
    'bootstrap_size' => theme_get_setting('bootstrap_size', 'my_theme'),
  ];

  // 共通スクリプトのライブラリを読み込み
  $variables['#attached']['library'][] = 'my_theme/global-scripts';

  // テーマ設定値を変数に割り当て
  foreach ($theme_settings as $key => $value) {
    $variables[$key] = $value;
  }

  // Bootswatchテーマが選択されている場合、そのライブラリを追加
  if (!empty($theme_settings['bootswatch_theme']) && $theme_settings['bootswatch_theme'] !== 'bootstrap5') {
    $variables['#attached']['library'][] = 'my_theme/' . $theme_settings['bootswatch_theme'];
  }

  // カスタムCSSの設定を取得
  $config = \Drupal::config('my_theme.settings');
  $enable_custom_css = $config->get('enable_custom_css');
  $custom_css = $config->get('custom_css');

  // カスタムCSSが有効かつ内容がある場合、<style>タグに埋め込む
  if ($enable_custom_css && !empty($custom_css)) {
    $variables['custom_css'] = [
      '#markup' => $custom_css,
    ];
  }
}


/**
 * ページテンプレート用の変数を準備します。
 */
function my_theme_preprocess_page(array &$variables) {
  $variables['container_class'] = theme_get_setting('container_type', 'my_theme');
  $variables['bootstrap_size'] = theme_get_setting('bootstrap_size', 'my_theme');
  $variables['branding_alignment'] = theme_get_setting('branding_alignment');
  $variables['header_alignment'] = theme_get_setting('my_theme_header_alignment');
  $variables['navbar_type'] = theme_get_setting('navbar_type');
}

/**
 * ブロックテンプレート用の変数を準備します。
 */
function my_theme_preprocess_block(array &$variables) {
  // メインメニューのデータを取得。
  // メインメニューのブロックをターゲットにする
  if ($variables['plugin_id'] == 'system_menu_block:main') {
    // メニューの内部名称
    $menu_name = 'main';
    // MenuTreeParameters の初期化
    $parameters = (new MenuTreeParameters())
      ->setTopLevelOnly() // トップレベルのみ取得
      ->setMaxDepth(3); // 必要に応じて深さを制限
    // メニュー項目を取得
    $menu_tree = \Drupal::menuTree()->load($menu_name, $parameters);
    if (!empty($menu_tree)) {
      // 重み順にメニュー項目をソート
      usort($menu_tree, function ($a, $b) {
        return $a->link->getWeight() - $b->link->getWeight();
      });
      // レンダリング可能なツリーを構築
      $renderable_tree = \Drupal::menuTree()->build($menu_tree);
      // メニュー項目をテンプレートに渡す
      if (isset($renderable_tree['#items'])) {
        $variables['main_menu'] = $renderable_tree['#items'];
      } else {
        \Drupal::logger('my_theme')->warning('Menu tree does not contain #items key.');
      }
    } else {
      \Drupal::logger('my_theme')->warning('Menu tree for @menu_name is empty.', ['@menu_name' => $menu_name]);
    }
  }

// 検索フォームブロックの場合、Bootswatchテーマを取得。
  if ($variables['plugin_id'] == 'search_form_block') {
    $variables['bootswatch_theme'] = theme_get_setting('bootswatch_theme', 'my_theme');
  }

  $variables['navbar_type'] = theme_get_setting('navbar_type');
}

/**
 * Bootswatchテーマの選択肢を提供します。
 */
function _my_theme_bootswatch_options() {
  return [
      'cerulean' => t('Cerulean'),
      'cosmo' => t('Cosmo'),
      'cyborg' => t('Cyborg'),
      'darkly' => t('Darkly'),
      'flatly' => t('Flatly'),
      'journal' => t('Journal'),
      'litera' => t('Litera'),
      'lumen' => t('Lumen'),
      'lux' => t('Lux'),
      'materia' => t('Materia'),
      'minty' => t('Minty'),
      'morph' => t('Morph'),
      'pulse' => t('Pulse'),
      'quartz' => t('Quartz'),
      'sandstone' => t('Sandstone'),
      'simplex' => t('Simplex'),
      'sketchy' => t('Sketchy'),
      'slate' => t('Slate'),
      'solar' => t('Solar'),
      'spacelab' => t('Spacelab'),
      'superhero' => t('Superhero'),
      'united' => t('United'),
      'vapor' => t('Vapor'),
      'yeti' => t('Yeti'),
      'zephyr' => t('Zephyr'),
  ];
}

/**
 * Bootstrapサイズの選択肢を提供します。
 */
function _my_theme_bootstrap_size_options() {
  return [
    'xs' => t('超小 (xs)'),
    'sm' => t('小 (sm)'),
    'md' => t('中 (md)'),
    'lg' => t('大 (lg)'),
    'xl' => t('超大 (xl)'),
    'xxl' => t('特大 (xxl)'),
  ];
}

/**
 * ナビゲーションバーの選択肢を提供します。
 */
function _my_theme_navbar_options() {
  return [
    'Navbar_1' => t('Navbar 1 (Primary)'),
    'Navbar_2' => t('Navbar 2 (Dark)'),
    'Navbar_3' => t('Navbar 3 (Light)'),
    'Navbar_4' => t('透過'),
  ];
}
