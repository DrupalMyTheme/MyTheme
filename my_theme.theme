<?php
/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_image_widget().
 */
function my_theme_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];
  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}


use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuTreeParameters;

/**
 * テーマ設定フォームを変更し、テーマ設定を追加する
 */
function my_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['my_theme_settings'] = [
    '#type' => 'details',
    '#title' => t('My Theme settings'),
    '#open' => TRUE,
  ];

  $form['bootswatch_theme'] = [
    '#type' => 'select',
    '#title' => t('Bootswatch Theme'),
    '#description' => t('サイト用にBootswatchのテーマを選択してください。'),
    '#default_value' => theme_get_setting('bootswatch_theme', 'my_theme'),
    '#options' => [
      'bootstrap5' => t('Default'),
      'cerulean' => t('Cerulean'),
      'cosmo' => t('Cosmo'),
      'cyborg' => t('Cyborg'),
      'darkly' => t('Darkly'),
      'flatly' => t('Flatly'),
      'journal' => t('Journal'),
      'litera' => t('Litera'),
      'lumen' => t('Lumen'),
      'lux' => t('Lux'),
      'materia' => t('Materia'),
    ],
  ];

  // コンテナタイプの設定
  $form['my_theme_settings']['container_type'] = [
    '#type' => 'select',
    '#title' => t('Container Type'),
    '#default_value' => theme_get_setting('container_type', 'my_theme'),
    '#options' => [
      'container' => t('Fixed'),
      'container-fluid' => t('Fluid'),
    ],
  ];

  // ブートストラップサイズの設定
  $form['my_theme_settings']['bootstrap_size'] = [
    '#type' => 'select',
    '#title' => t('Bootstrap Size'),
    '#description' => t('注意: この設定はコンテナタイプがFluidの場合無視されます。'),
    '#options' => [
      'xs' => t('Extra small (xs)'),
      'sm' => t('Small (sm)'),
      'md' => t('Medium (md)'),
      'lg' => t('Large (lg)'),
      'xl' => t('Extra large (xl)'),
      'xxl' => t('Extra extra large (xxl)'),
    ],
    '#default_value' => theme_get_setting('bootstrap_size', 'my_theme'),
  ];

  // ブランドの配置設定を追加
  $form['branding_alignment'] = [
    '#type' => 'radios',
    '#title' => t('Branding Alignment'),
    '#description' => t('注意: この設定は Main navigation や Additional navigation にブロックが配置されていると Left に固定されます。'),
    '#default_value' => theme_get_setting('branding_alignment'),
    '#options' => [
      'left' => t('Left'),
      'center' => t('Center'),
    ],
  ];

  // ヘッダーの配置設定を追加
  $form['my_theme_header_alignment'] = [
    '#type' => 'select',
    '#title' => t('Header Alignment'),
    '#default_value' => theme_get_setting('my_theme_header_alignment'),
    '#options' => [
      'left' => t('Left'),
      'center' => t('Center'),
      'right' => t('Right'),
    ],
  ];

  // フォームの再構築を確実にするためのカスタムサブミットハンドラー
  $form['#submit'][] = 'my_theme_form_system_theme_settings_submit';
}

/**
 * カスタムサブミットハンドラー
 */
function my_theme_form_system_theme_settings_submit($form, FormStateInterface $form_state) {
  // ヘッダーの配置設定を保存
  $header_alignment = $form_state->getValue('my_theme_header_alignment');
  
  // 設定を保存するためにconfigオブジェクトを使用
  \Drupal::configFactory()->getEditable('my_theme.settings')
    ->set('my_theme_header_alignment', $header_alignment)
    ->save();
}

/**
 * HTMLテンプレートにテーマ設定を反映する
 */
function my_theme_preprocess_html(array &$variables) {
  $theme = theme_get_setting('bootswatch_theme', 'my_theme');

  // 共通のスクリプトを読み込む
  $variables['#attached']['library'][] = 'my_theme/global-scripts';

  // テーマ設定関係を読み込む
  $variables['container_class'] = theme_get_setting('container_type', 'my_theme');
  $variables['bootstrap_size'] = theme_get_setting('bootstrap_size', 'my_theme');

  // 選択されたBootswatchのテーマCSSをライブラリから読み込む
  if ($theme && $theme !== 'bootstrap5') {
    $variables['#attached']['library'][] = 'my_theme/' . $theme;
  }
}

/**
 * ページテンプレートにテーマ設定を反映する
 */
function my_theme_preprocess_page(array &$variables) {
  // サイトブランディングの左寄せ・中央寄せの設定
  $variables['container_class'] = theme_get_setting('container_type', 'my_theme');
  $variables['bootstrap_size'] = theme_get_setting('bootstrap_size', 'my_theme');
  $variables['branding_alignment'] = theme_get_setting('branding_alignment');

  // ヘッダーの配置設定を取得
  $header_alignment = theme_get_setting('my_theme_header_alignment');
  
  // ページテンプレートに配置設定を追加
  $variables['header_alignment'] = $header_alignment;
}

/**
 * メインメニューのデータ取得
 */
function my_theme_preprocess_block(array &$variables) {
  if ($variables['plugin_id'] == 'system_menu_block:main') {
    $parameters = new MenuTreeParameters();
    $menu_tree = \Drupal::menuTree()->load('main', $parameters);
    $menu = \Drupal::menuTree()->build($menu_tree);
    $variables['main_menu'] = $menu['#items'];
  }
}

